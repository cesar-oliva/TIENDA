//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceRubroProducto
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoRubroProducto", Namespace="http://schemas.datacontract.org/2004/07/CapaServicioServidor.DataObjectTransfer")]
    public partial class DtoRubroProducto : object
    {
        
        private string CodigoRubroProductoField;
        
        private string DescripcionEstadoField;
        
        private string DescripcionImpuestoField;
        
        private string DescripcionRubroProductoField;
        
        private System.DateTime FechaRegistroField;
        
        private int IdRubroProductoField;
        
        private double MargenGananciaField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodigoRubroProducto
        {
            get
            {
                return this.CodigoRubroProductoField;
            }
            set
            {
                this.CodigoRubroProductoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DescripcionEstado
        {
            get
            {
                return this.DescripcionEstadoField;
            }
            set
            {
                this.DescripcionEstadoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DescripcionImpuesto
        {
            get
            {
                return this.DescripcionImpuestoField;
            }
            set
            {
                this.DescripcionImpuestoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DescripcionRubroProducto
        {
            get
            {
                return this.DescripcionRubroProductoField;
            }
            set
            {
                this.DescripcionRubroProductoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FechaRegistro
        {
            get
            {
                return this.FechaRegistroField;
            }
            set
            {
                this.FechaRegistroField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdRubroProducto
        {
            get
            {
                return this.IdRubroProductoField;
            }
            set
            {
                this.IdRubroProductoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MargenGanancia
        {
            get
            {
                return this.MargenGananciaField;
            }
            set
            {
                this.MargenGananciaField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRubroProducto.IServiceCrudOf_DtoRubroProducto")]
    public interface IServiceCrudOf_DtoRubroProducto
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/Registrar", ReplyAction="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/RegistrarResponse")]
        bool Registrar(ServiceRubroProducto.DtoRubroProducto oEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/Registrar", ReplyAction="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/RegistrarResponse")]
        System.Threading.Tasks.Task<bool> RegistrarAsync(ServiceRubroProducto.DtoRubroProducto oEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/Actualizar", ReplyAction="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/ActualizarResponse")]
        bool Actualizar(ServiceRubroProducto.DtoRubroProducto oEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/Actualizar", ReplyAction="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/ActualizarResponse")]
        System.Threading.Tasks.Task<bool> ActualizarAsync(ServiceRubroProducto.DtoRubroProducto oEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/Eliminar", ReplyAction="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/EliminarResponse")]
        bool Eliminar(int idEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/Eliminar", ReplyAction="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/EliminarResponse")]
        System.Threading.Tasks.Task<bool> EliminarAsync(int idEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/Mostrar", ReplyAction="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/MostrarResponse")]
        ServiceRubroProducto.DtoRubroProducto[] Mostrar();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/Mostrar", ReplyAction="http://tempuri.org/IServiceCrudOf_DtoRubroProducto/MostrarResponse")]
        System.Threading.Tasks.Task<ServiceRubroProducto.DtoRubroProducto[]> MostrarAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface IServiceCrudOf_DtoRubroProductoChannel : ServiceRubroProducto.IServiceCrudOf_DtoRubroProducto, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class ServiceCrudOf_DtoRubroProductoClient : System.ServiceModel.ClientBase<ServiceRubroProducto.IServiceCrudOf_DtoRubroProducto>, ServiceRubroProducto.IServiceCrudOf_DtoRubroProducto
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceCrudOf_DtoRubroProductoClient() : 
                base(ServiceCrudOf_DtoRubroProductoClient.GetDefaultBinding(), ServiceCrudOf_DtoRubroProductoClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IServiceCrudOf_DtoRubroProducto.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceCrudOf_DtoRubroProductoClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceCrudOf_DtoRubroProductoClient.GetBindingForEndpoint(endpointConfiguration), ServiceCrudOf_DtoRubroProductoClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceCrudOf_DtoRubroProductoClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceCrudOf_DtoRubroProductoClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceCrudOf_DtoRubroProductoClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceCrudOf_DtoRubroProductoClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceCrudOf_DtoRubroProductoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public bool Registrar(ServiceRubroProducto.DtoRubroProducto oEntity)
        {
            return base.Channel.Registrar(oEntity);
        }
        
        public System.Threading.Tasks.Task<bool> RegistrarAsync(ServiceRubroProducto.DtoRubroProducto oEntity)
        {
            return base.Channel.RegistrarAsync(oEntity);
        }
        
        public bool Actualizar(ServiceRubroProducto.DtoRubroProducto oEntity)
        {
            return base.Channel.Actualizar(oEntity);
        }
        
        public System.Threading.Tasks.Task<bool> ActualizarAsync(ServiceRubroProducto.DtoRubroProducto oEntity)
        {
            return base.Channel.ActualizarAsync(oEntity);
        }
        
        public bool Eliminar(int idEntity)
        {
            return base.Channel.Eliminar(idEntity);
        }
        
        public System.Threading.Tasks.Task<bool> EliminarAsync(int idEntity)
        {
            return base.Channel.EliminarAsync(idEntity);
        }
        
        public ServiceRubroProducto.DtoRubroProducto[] Mostrar()
        {
            return base.Channel.Mostrar();
        }
        
        public System.Threading.Tasks.Task<ServiceRubroProducto.DtoRubroProducto[]> MostrarAsync()
        {
            return base.Channel.MostrarAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IServiceCrudOf_DtoRubroProducto))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IServiceCrudOf_DtoRubroProducto))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:10524/ServiceRubroProducto.svc");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServiceCrudOf_DtoRubroProductoClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IServiceCrudOf_DtoRubroProducto);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServiceCrudOf_DtoRubroProductoClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IServiceCrudOf_DtoRubroProducto);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IServiceCrudOf_DtoRubroProducto,
        }
    }
}
